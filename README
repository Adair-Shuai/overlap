-------------------------------------------------------------------------------
Exact calculation of the overlap volume of spheres and mesh elements.

Copyright (C) 2015 Severin Strobl <severin.strobl@fau.de>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------------------

0. Dependencies
===============

The build-time dependencies of this code are:
	* Eigen3 (http://eigen.tuxfamily.org)
	* C++11 compliant compiler

The software was successfully compiled and tested using the following
compilers:
	* GNU G++ compiler (versions 4.8.4 and 4.9.3)
	* Intel C++ compiler (version 15.0.2)
	* Clang C++ compiler (version 3.6.1)

1. Usage
========

The library is implemented as a pure header-only library written in plain
C++11. To use it in your code, simply include the header file 'overlap.hpp'
and make sure the Eigen3 headers are found by your compiler or build system.
A minimal example calculating the overlap of a hexahedron with a side length of
2 centered at the origin and a sphere with radius 1 centered at a corner of the
hexahedron could look something like this:

-------------------------------------------------------------------------------

#include "overlap.hpp"

#include <iostream>

int main() {
	vector_t v0(-1, -1, -1);
	vector_t v1( 1, -1, -1);
	vector_t v2( 1,  1, -1);
	vector_t v3(-1,  1, -1);
	vector_t v4(-1, -1,  1);
	vector_t v5( 1, -1,  1);
	vector_t v6( 1,  1,  1);
	vector_t v7(-1,  1,  1);

	Hexahedron hex(v0, v1, v2, v3, v4, v5, v6, v7);
	Sphere s(vector_t::Constant(1), 1);

	std::cout << "overlap of sphere and hexahedron: " << overlap(s, hex)
		<< std::endl;

	return 0;
}

-------------------------------------------------------------------------------

This code snippet calculates and prints the correct result (pi/6) for this
simple configuration.

2. Details
==========

The mathematical expressions and algorithms used in this code are described in
S. Strobl et al.: Exact calculation of the overlap volume of spheres and mesh
elements, Journal of Computational Physics, 2016 (http://dx.doi.org/10.1016/j.jcp.2016.02.003).
